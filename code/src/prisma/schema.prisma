generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  MANAGER
  ORDER
  USER
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name     String  @db.VarChar(80)
  email    String  @unique @db.VarChar(80)
  password String  @db.VarChar(80)
  active   Boolean @default(true)
  role     ROLE    @default(USER)
  document String? @db.VarChar(14)

  corporateName String? @map("corporate_name")
  fatansyName   String? @map("fatansy_name")

  confirmEmail  String? @map("confirm_email")
  resetPassword String? @map("reset_password")

  Address Address?
  Budget  Budget[]

  @@map("users")
}

model Address {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  cep          String
  number       Int
  complement   String
  address      String
  neighborhood String
  cityId       Int    @map("city_id")
  userId       String @unique @map("user_id") @db.Uuid

  City City @relation(fields: [cityId], references: [id], onDelete: NoAction)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model State {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name String
  uf   String @db.VarChar(2)

  Cities City[]

  @@map("states")
}

model City {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name    String
  stateId Int    @map("state_id")

  State     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  Addresses Address[]

  @@map("cities")
}

model Product {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  description   String
  name          String
  picture       String
  subCategoryId String @map("sub_category_id") @db.Uuid
  brandId       String @map("brand_id") @db.Uuid
  measureId     Int    @map("measure_id")

  Measure          Measure           @relation(fields: [measureId], references: [id])
  SubCategory      SubCategory       @relation(fields: [subCategoryId], references: [id])
  ProductOnBudgets ProductOnBudget[]
  Brand            Brand             @relation(fields: [brandId], references: [id], onDelete: NoAction)

  @@map("products")
}

model Brand {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  name      String   @unique

  Product Product[]

  @@map("brands")
}

model Category {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  name      String

  SubCategories SubCategory[]

  @@map("categories")
}

model SubCategory {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  name       String
  categoryId String   @map("category_id") @db.Uuid

  Category Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Product  Product[]

  @@map("sub_categories")
}

model ProductOnBudget {
  budgetId  Int      @map("budget_id")
  productId String   @map("product_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  pricer Float @default(0)
  qntd   Float

  Budget  Budget  @relation(fields: [budgetId], references: [id])
  Product Product @relation(fields: [productId], references: [id])

  @@id([budgetId, productId])
  @@map("product_on_budgets")
}

model Budget {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  userId      String   @map("user_id") @db.Uuid
  observation String?
  discount    Float    @default(0)
  validate    DateTime
  grossValue  Float    @default(0) @map("gross_value")
  netValue    Float    @default(0) @map("net_value")

  User             User              @relation(fields: [userId], references: [id], onDelete: NoAction)
  ProductOnBudgets ProductOnBudget[]

  @@map("budgets")
}

model Measure {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  name      String   @unique

  Products Product[]

  @@map("measures")
}
